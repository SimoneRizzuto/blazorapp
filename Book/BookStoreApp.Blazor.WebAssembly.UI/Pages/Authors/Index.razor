@page "/Authors/"

@using BookStoreApp.Blazor.WebAssembly.UI.Static
@using BookStoreApp.Blazor.WebAssembly.UI.Models
@inject IAuthorService authorService
@inject IJSRuntime js
@inject NavigationManager navManager
<h3>Index</h3>

<style>
    .my-class {
        width: 500px;
    }
</style>

@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading Data...</h4>
        </div>
    }
    else
    {
        <div>
            <AuthorizeView Roles=@Roles.Administrator>
                <DxButton Text="Create Author" RenderStyle="ButtonRenderStyle.Primary" SizeMode="SizeMode.Medium" IconCssClass="oi oi-plus" 
                      Click="@GoToCreate" />
            </AuthorizeView>
        </div><br/>

        <div>
            <DxButton Text="Column Selecter (Filter)" RenderStyle="ButtonRenderStyle.Dark" SizeMode="SizeMode.Small" CssClass="column-chooser-button" 
                      Click="@PickColumn"/>
            <br/>
        </div>

        <div>
            <DxGrid Data="Authors"
                    KeyFieldName="Id"
                    @ref="Grid"
                    ShowGroupPanel="true"
                    ShowFilterRow="true"
                    PageSize="10"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40, 50, 75, 100})" 
                    AllowSelectRowByClick="true"
                    SelectionMode="GridSelectionMode.Multiple"
                    @bind-SelectedDataItems="@Selected">
                <Columns>
                    @* Selection *@
                    <DxGridSelectionColumn Width="15"/>
                    
                    @* First Name *@
                    <DxGridDataColumn FieldName="FirstName" MinWidth="375"/>

                    @* Last Name *@
                    <DxGridDataColumn FieldName="LastName" MinWidth="375"/>

                    @* Options *@
                    <DxGridCommandColumn Width="350px" Caption="Options">
                        <CellDisplayTemplate Context="currentBook">
                            <DxButton Text="Details" RenderStyle="ButtonRenderStyle.Primary" SizeMode="SizeMode.Medium" IconCssClass="oi oi-pencil" @onclick=@(() => Details((int)@currentBook.GetRowValue("Id")))/>
                            <AuthorizeView Roles=@Roles.Administrator>
                                <DxButton Text="Edit" RenderStyle="ButtonRenderStyle.Warning" SizeMode="SizeMode.Medium" IconCssClass="oi oi-pencil" @onclick=@(() => Edit((int)@currentBook.GetRowValue("Id")))/>
                                <DxButton Text="Delete" RenderStyle="ButtonRenderStyle.Danger" SizeMode="SizeMode.Medium" IconCssClass="oi oi-delete" @onclick=@(() => Delete((int)@currentBook.GetRowValue("Id")))/>
                            </AuthorizeView>
                        </CellDisplayTemplate>
                    </DxGridCommandColumn>

                </Columns>
            </DxGrid>
        </div> <br/>

        @foreach(var author in Selected.Cast<AuthorReadOnlyDto>()) 
        {
            <li class="list-group-item bg-transparent text-body py-1 border-0"><b>Author:</b> <i>@author.FirstName @author.LastName</i></li>
        }
    }
}

@code {
    private List<AuthorReadOnlyDto> Authors;
    public int TotalSize { get; set; }
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>>{ Success = true };

    IGrid Grid { get; set; }
    IReadOnlyList<object> Selected { get; set; } // Selected isn't allowed to be null/empty.

    protected override async Task OnInitializedAsync()
    {
    //Authors = (await httpClient.AuthorsAllAsync()).ToList();
        response = await authorService.Get();
        if (response.Success)
        {
            Authors = response.Data;
        }
        Selected = Authors.Take(0).ToList(); 
    }

    private void Details(int bookId)
    {
        navManager.NavigateTo($"/authors/details/{bookId}");
    }

    private void Edit(int bookId)
    {
        navManager.NavigateTo($"/authors/update/{bookId}");
    }

    private async Task Delete(int authorId)
    {
        var author = Authors.First(q => q.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you would like to delete {author.FirstName} {author.LastName}?");

        if (confirm)
        {
            var response = await authorService.Delete(authorId);

            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }

    private void PickColumn()
    {
        Grid.ShowColumnChooser(".column-chooser-button");
    }

    private void GoToCreate()
    {
        navManager.NavigateTo("/authors/create/");
    }
}
