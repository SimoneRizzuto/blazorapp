@page "/books/"
@using Microsoft.AspNetCore.Authentication.OAuth.Claims
@using BookStoreApp.Blazor.Server.UI.Static
@using DevExpress.Data.Linq
@using DevExpress.Blazor.Internal.Grid
@using DevExpress.Blazor.Internal

@inject IBookService bookService
@inject IJSRuntime js
@inject NavigationManager navManager
<h3>Index</h3>

@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Books == null)
    {
        <div class="alert alert-info">
            <h4>Loading Data...</h4>
        </div>
    }
    else
    {
        <div>
            <AuthorizeView Roles=@Roles.Administrator>
                <DxButton Text="Create Book" RenderStyle="ButtonRenderStyle.Primary" SizeMode="SizeMode.Medium" IconCssClass="oi oi-plus" Click="@GoToCreate" />
            </AuthorizeView>
            <br/>
        </div>
        <br/>
        <div>
            <DxGrid Data="Books"
                    KeyFieldName="Id"
                    ShowFilterRow="true"
                    PageSize="5"
                    PageSizeSelectorItems="@(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40, 50, 75, 100})" >
                <Columns>
                    @* Selection *@
                    <DxGridSelectionColumn Width="15"/>
                    
                    @* Image *@
                    <DxGridDataColumn FieldName="Image" Width="113px" FilterRowEditorVisible="false">
                        <CellDisplayTemplate>
                            <img src="@context.GetRowValue("Image")" style="width: 100px; height: 100px" alt="@context.GetRowValue("Title")" class="rounded float-start"/>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    
                    @* Title *@
                    <DxGridDataColumn FieldName="Title" MinWidth="375">
                        <CellDisplayTemplate Context="currentBook">
                            <td><a class="btn btn-link" href="/books/details/@currentBook.GetRowValue("Id")"> @currentBook.GetRowValue("Title")</a></td>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    
                    @* Price *@
                    <DxGridDataColumn FieldName="Price" DisplayFormat="c2" Width="100px"/>
                    
                    @* Author Name *@
                    <DxGridDataColumn FieldName="AuthorName" MinWidth="375">
                        <CellDisplayTemplate Context="currentBook">
                            <td><a class="btn btn-link" href="/authors/details/@currentBook.GetRowValue("AuthorId")"> @currentBook.GetRowValue("AuthorName")</a></td>
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                    
                    @* Options *@
                    <DxGridCommandColumn Width="350px" Caption="Options">
                        <CellDisplayTemplate Context="currentBook">
                            <DxButton Text="Details" RenderStyle="ButtonRenderStyle.Primary" SizeMode="SizeMode.Medium" IconCssClass="oi oi-pencil" @onclick=@(() => Details((int)@currentBook.GetRowValue("Id")))/>
                            <AuthorizeView Roles=@Roles.Administrator>
                                <DxButton Text="Edit" RenderStyle="ButtonRenderStyle.Warning" SizeMode="SizeMode.Medium" IconCssClass="oi oi-pencil" @onclick=@(() => Edit((int)@currentBook.GetRowValue("Id")))/>
                                <DxButton Text="Delete" RenderStyle="ButtonRenderStyle.Danger" SizeMode="SizeMode.Medium" IconCssClass="oi oi-delete" @onclick=@(() => Delete((int)@currentBook.GetRowValue("Id")))/>
                            </AuthorizeView>
                        </CellDisplayTemplate>
                    </DxGridCommandColumn>

                </Columns>
            </DxGrid>
        </div>

        <br/>

        
        @*<a class="btn btn-warning" @onclick=@(() => Edit((int)@currentBook.GetRowValue("Id")))/>
        <a class="btn btn-danger" @onclick=@(() => Delete((int)@currentBook.GetRowValue("Id")))/>*@
        

        @*<table class="table table-responsive">
            <thead>
            <tr>
                <th></th>
                <th>Title</th>
                <th>Price</th>
                <th>Author Name</th>
                <th>Action</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var book in Books)
            {
                <tr>
                    @if (book.Image != null)
                    {
                        <td>
                            <img src="@book.Image" width="100" height="100" alt="@book.Title"/>
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                    <td>@book.Title</td>
                    <td>$@book.Price</td>
                    <td><a class="btn btn-link" href="/authors/details/@book.AuthorId">@book.AuthorName </a></td>
                    <td>
                        <a class="btn btn-primary" href="/books/details/@book.Id"><span class="oi oi-book" aria-hidden="true"></span> Details</a>

                        
                    </td>
                </tr>
            }
            </tbody>
        </table>*@
    }
}

@code {
    private List<BookReadOnlyDto> Books;
    private Response<List<BookReadOnlyDto>> response = new Response<List<BookReadOnlyDto>>{ Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await bookService.Get();
        if (response.Success)
        {
            Books = response.Data;
        }
    }


    private void Details(int bookId)
    {
        navManager.NavigateTo($"/books/details/{bookId}");
    }

    private void Edit(int bookId)
    {
        navManager.NavigateTo($"/books/update/{bookId}");
    }

    private async Task Delete(int bookId)
    {
        var book = Books.First(q => q.Id == bookId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you would like to delete {book.Title}?");

        if (confirm)
        {
            var response = await bookService.Delete(bookId);

            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }

    private void GoToCreate()
    {
        navManager.NavigateTo("/books/create/");
    }
}
