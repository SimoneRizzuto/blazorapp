@page "/Authors/"
@using Microsoft.AspNetCore.Authentication.OAuth.Claims
@using BookStoreApp.Blazor.Server.UI.Static
@using BookStoreApp.Blazor.Server.UI.Models
@inject IAuthorService authorService
@inject IJSRuntime js
<h3>Index</h3>

@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading Data...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles=@Roles.Administrator>
            <a class="btn btn-dark" href="/authors/create"><span class="oi oi-plus" aria-hidden="true"></span> Create </a>
        </AuthorizeView>
        <br/>
        @*AuthorTable Authors="Authors" TotalSize="TotalSize" OnScroll="LoadAuthors"/>*@

        <table class="table table-responsive">
            <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Action</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var author in Authors)
            {
                <tr>
                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>
                        <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-book" aria-hidden="true"></span> Details</a>
                        
                        <AuthorizeView Roles=@Roles.Administrator>
                            <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-pencil" aria-hidden="true"></span> Edit</a>
                            <a class="btn btn-danger" @onclick=@(() => Delete(@author.Id))><span class="oi oi-delete" aria-hidden="true"></span> Delete</a>
                        </AuthorizeView>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private List<AuthorReadOnlyDto> Authors;
    public int TotalSize { get; set; }
    private Response<AuthorReadOnlyDtoVirtualiseResponse> response = new Response<AuthorReadOnlyDtoVirtualiseResponse>{ Success = true };

    protected override async Task OnInitializedAsync()
    {
    //Authors = (await httpClient.AuthorsAllAsync()).ToList();
        response = await authorService.Get(new QueryParameters
        {
            StartIndex = 0
        });
        if (response.Success)
        {
            Authors = response.Data.Items.ToList();
        }
    }

    private async Task LoadAuthors(QueryParameters queryParams)
    {
        var virtualiseResult = await authorService.Get(queryParams);
        Authors = virtualiseResult.Data.Items.ToList();
        TotalSize = virtualiseResult.Data.TotalSize;
    }
    
    
    private async Task Delete(int authorId)
    {
        var author = Authors.First(q => q.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you would like to delete {author.FirstName} {author.LastName}?");

        if (confirm)
        {
            var response = await authorService.Delete(authorId);

            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
