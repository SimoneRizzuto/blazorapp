@page "/authors/details/{Id:int}"
@using BookStoreApp.Blazor.Server.UI.Static
@inject NavigationManager navManager
@inject IAuthorService authorService

<h3>Author Details</h3>

<EditForm Model="Author">
    <fieldset disabled="true">
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Author.FirstName" class="form-control" id="firstname"/>
            <ValidationMessage For="@(() => Author.FirstName)"/>
        </div>
        <br/>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="Author.LastName" class="form-control" id="lastname"/>
            <ValidationMessage For="@(() => Author.LastName)"/>
        </div>
        <br/>
        <div class="form-group">
            <label for="bio">Biography</label>
            <InputText @bind-Value="Author.Bio" class="form-control" id="bio"/>
            <ValidationMessage For="@(() => Author.Bio)"/>
        </div>
    <br/>
    </fieldset>
    @if (Author.Books == null || !Author.Books.Any())
    {
        <div class="alert alert-dismissible alert-secondary">
            No books available for this author...
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var book in Author.Books)
            {
                <div class="col-3" style="max-width: 1000px">
                    <div class="card" style="max-width: 18rem;">
                       
                        <img src="@book.Image" class="card-img-top" alt="@book.Title" style="max-width: 286px; height: 164px"/>
                        
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-test">$@book.Price</p>
                            <DxButton Text="View Book" RenderStyle="ButtonRenderStyle.Primary" SizeMode="SizeMode.Medium" @onclick=@(() => GoToBookDetails((int)@book.Id))/>
                        </div>
                    </div>
                    <br/>
                </div>
                
            }
        </div>
    }
    <br/>
    
</EditForm>  
    
    
<AuthorizeView Roles=@Roles.Administrator>
    <button @onclick="GoToEdit" class="btn btn-warning" type="button">
        <span class="oi oi-pencil"/>
        Edit Author
    </button>
</AuthorizeView>

<button @onclick="BackToList" class="btn btn-outline-secondary" type="button">
    <span class="oi oi-media-skip-backward"/>
    Back to List
</button>



@code {
    [Parameter]
    public int Id { get; set; }

    private AuthorDetailsDto Author = new AuthorDetailsDto();

    protected async override Task OnInitializedAsync()
    {
        var response = await authorService.Get(Id);
        if (response.Success)
        {
            Author = response.Data;
        }
    }

    private void GoToBookDetails(int id)
    {
        navManager.NavigateTo($"/books/details/{id}");
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }

    private void GoToEdit()
    {
        navManager.NavigateTo($"/authors/update/{Author.Id}");
    }
}
