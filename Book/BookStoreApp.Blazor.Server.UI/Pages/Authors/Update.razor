@page "/authors/update/{Id:int}"
@using BookStoreApp.Blazor.Server.UI.Static
@attribute [Authorize(Roles = Roles.Administrator)]
@inject IAuthorService authorService
@inject NavigationManager navManager
<h3>Update Author</h3>
<EditForm Model="Author" OnValidSubmit="HandleUpdateAuthor">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText @bind-Value="Author.FirstName" class="form-control" id="firstname"/>
        <ValidationMessage For="@(() => Author.FirstName)"/>
    </div> <br/>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText @bind-Value="Author.LastName" class="form-control" id="lastname"/>
        <ValidationMessage For="@(() => Author.LastName)"/>
    </div> <br/>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputText @bind-Value="Author.Bio" class="form-control" id="bio"/>
        <ValidationMessage For="@(() => Author.Bio)"/>
    </div> <br/>
    
    <div class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Update Author
    </div>
    <button @onclick="BackToList" class="btn btn-outline-secondary" type="button">
        <span class="oi oi-media-skip-backward"/>
        Back to List
    </button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private AuthorUpdateDto Author = new AuthorUpdateDto();

    protected override async Task OnInitializedAsync()
    {
        var response = await authorService.GetForUpdate(Id);
        if (response.Success)
        {
            Author = response.Data;
        }

        Console.Write(response);
    }

    private async Task HandleUpdateAuthor()
    {
        var response = await authorService.Edit(Id, Author);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }
}